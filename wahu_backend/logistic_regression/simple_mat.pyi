from typing import Optional


class Mat:
    def __init__(self, lst: Optional[list[list[float]]]=None):...
    def as_list(self) -> list[list[float]]:...
    def dot(self, other: Mat) -> Mat:...
    @property
    def rows(self) -> int:...
    @property
    def cols(self) -> int:...
    def copy(self) -> Mat:...
    def __str__(self) -> str:...
    @property
    def T(self) -> Mat:...
    def add(self, other: Mat) -> Mat:...
    def add_float(self, other: float) -> Mat:...
    def subtract(self, other: Mat) -> Mat:...
    def subtract_float(self, other: float) -> Mat:...
    def subtractedby_float(self, other: float) -> Mat:...
    def scale(self, scaler: float) -> Mat:...
    def mul(self, other: Mat) -> Mat:...
    def div(self, other: Mat) -> Mat:...
    def divedby_float(self, other: float) -> Mat:...
    def average(self, axis: int=1) -> Mat:...
    def __add__(self, other: Mat | float) -> Mat:...
    def __sub__(self, other: Mat | float) -> Mat:...
    def __rsub__(self, other: float) -> Mat:...
    def __mul__(self, other: Mat | float) -> Mat:...
    def __truediv__(self, other: Mat | float) -> Mat:...
    def __rtruediv__(self, other: float) -> Mat:...
    def __getitem__(self, idx: tuple[int, int]) -> float:...


def many(rows: int, cols: int, val: float) -> Mat:...

def exp_mat(mat: Mat) -> Mat:...
def log_mat(mat: Mat) -> Mat:...
